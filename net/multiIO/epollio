多路IO转接服务器之epoll
epoll
  epoll是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大
量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描
述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只
要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。
  epoll除了提供select/poll那种IO事件的电平触发（Level Triggered）外，还提
供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减
epoll_wait/epoll_pwait的调用，提高应用程序效率。

epoll基础API
1 创建一个epoll句柄，参数size用来告诉内核监听的文件描述符的个数，跟内存大
小有关。
      #include<sys/epoll.h>
      int epoll_create(int size)   size--->监听数目
2 控制某个epoll监控的文件描述符上的事件：注册、修改、删除
  #include<sys/epoll.h>
  int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
    
    epfd：为epoll_creat的句柄
    op：表示动作，用3个宏来表示：
          EPOLL_CTL_ADD    注册新的fd到epfd
          EPOLL_CTL_MOD    修改已经注册的fd的监听事件
          EPOLL_CTL_DEL    从epfd删除一个fd
    event：告诉内核需要监听的事件

    struct epoll_event{
          __uint32_t events;  //epoll events
          epoll_data_t data;  //User data variable
    };

    typedef union epoll_data{
          void *ptr;
          int fd;
          uint32_t u32;
          uint64_t u64;
    }epoll_data_t;
    EPOLLIN  表示对应的文件描述符可以读
    EPOLLOUT 表示对应的文件描述符可以写
    EPOLLERR 表示对应的文件描述符发生错误

3 等待所监控文件描述符上有事件的产生，类似于select()调用。
  #include <sys/epoll.h>
  int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int
timeout);
    events：用来存内核得到事件的集合
    maxevents：告知内核这个events有多大，这个maxevents的值不能大于创建epoll_creat()时的size
    timeout：是超时时间
      -1 阻塞
      0  立即返回，非阻塞
      >0 指定毫秒
   返回值：成功返回有多少文件描述符就绪，时间到时返回0，出错返回-1


