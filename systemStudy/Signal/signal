信号
  信号是UNIX系统响应某些状况而产生的事件，进程在接受到信号时会采取相应的行动。
  信号是因为某些错误条件而产生的，比如内存段冲突/浮点处理器错误或者非法指令等。
  信号是在软件层次上对中断的一种模拟，所以通常把它称为是软中断。
1 特点
  简单
  携带的信息量少
  使用在某个特定的场景中
2 信号的状态
  产生
  未决状态---没有被处理
  递达---信号被处理了
3 相关函数
（1）kill---发送信号给指定进程
    函数原型：int kill(pid_t pid, int sig);
          sig为32个信号宏的名字或者数字代号也可以
     pid参数：
          pid>0：发送信号给指定的进程
          pid=0：发送信号给与调用kill函数进程属于同一进程组的所有进程
          pid<-1：取|pid|发送给对应进程组
          pid=-1：发送给进程有权限发送的系统中所有进程
     函数返回值：
          成功：0
          失败：-1
（2）raise---自己给自己发信号
    kill(getpid(), SIGKILL);
    函数原型：int raise(int sig);
（3）闹钟（定时器）
     a.alarm ---设置定时器（每个进程只有一个定时器）
          使用的是自然定时法
            不受进程状态的影响
          函数原型：unsigned int alarm(unsigned int seconds);
            参数：秒
            当时间到达之后，函数发出一个信号：SIGALRM
              告诉linux内核n秒以后，发送SIGALARM信号 
（4）setitimer---定时器，并实现周期性定时
     函数原型：
        int setitimer(int which, const struct itimerval* new_value,
                      struct itimerval* old_value //NUll);
        struct itimerval{
                     struct timeval it_interval; //定时器循环周期
                     struct timeval it_value; //第一次触发定时器的时间
                    }；
        struct timeval{
                     time_t tv_sec; //seconds
                     suseconds_t tv_usec; //microseconds
                      };
4 信号集
（1）概念
    未决信号集：没有被当前进程处理的信号
    阻塞信号集：将某个信号放到阻塞信号集，这个信号就不会被进程处理；
                阻塞解除之后，信号被处理。
（2）自定义信号集
    int sigemptyset(sigset_t *set);  将set集合置空
    int sigfillset(sigset_t *set);  将所有信号加入set集合
    int sigaddset(sigset_t *set, int signo); 将signo信号加入到set集合
    int sigdelset(sigset_t *set, int signo); 从set集合中一处signo信号
    int sigismember(const sigset_t *set, int signo); 判断信号是否存在
（3）sigprocmask函数
    屏蔽and解除信号屏蔽，将自定义信号集设置给阻塞信号集
    函数原型：int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
（4）sigending ---读取当前进程的未决信号集
    函数原型：int sigpending(sigset_t *set);
    参数：set--内核将未决信号集楔入set
5 信号捕捉
(1)signal函数
    typedef void (*sighandler_t)(int);
    sighandler_t signal(int signum, sighandler_t handler);
(2)sigaction函数
    函数原型：
        int sigaction(int signum,//捕捉的信号
                      const struct sigaction *act,
                      struct sigaction *oldact);
        struct sigaction{
              void (*sa_handler)(int);
              void (*sa_sigaction)(int,siginfo_t*,void*);
              sigset_t sa_mask;
                //在信号处理函数执行过程中，临时屏蔽指定的信号
              int sa_flags;
                //0-sa_handler
              void (*sa_restorer)(void);
              };
